name: Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  VERSION: 1.0.6
  BUILD_CONFIGURATION: Release
  SERVER_NAME: "The Heroes Journey"
  FILE_NAME: "heroesjourneyeq-test"
  FILELIST_URL: "https://github.com/The-Heroes-Journey-EQEMU/eqemupatcher/releases/latest/download/"
  PATCHER_URL: "https://github.com/The-Heroes-Journey-EQEMU/eqemupatcher/releases/latest/download/"
  STORAGE_URL: "https://patch.heroesjourneyemu.com/rof/"

permissions:
  contents: write
  packages: write

inputs:
  build_exe:
    description: 'Build EXE file'
    required: true
    type: boolean
    default: false

jobs:
  staging:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Generate manifest
      run: npm start

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore "THJPatcher/THJPatcher.sln"

    - name: Build Application
      run: |
        cd "THJPatcher"
        dotnet build "THJPatcher.sln" -c ${{env.BUILD_CONFIGURATION}} /p:VERSION="${{ env.VERSION }}.${{ github.run_number }}-staging"

    - name: Upload staging artifacts
      uses: actions/upload-artifact@v3
      with:
        name: staging-build
        path: THJPatcher/THJPatcher/bin/Release/net8.0-windows/

  production:
    needs: staging
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download staging artifacts
      uses: actions/download-artifact@v3
      with:
        name: staging-build
        path: THJPatcher/THJPatcher/bin/Release/net8.0-windows/

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build EXE (Optional)
      if: ${{ inputs.build_exe }}
      run: |
        cd "THJPatcher"
        dotnet publish "THJPatcher.sln" -c ${{env.BUILD_CONFIGURATION}} -r win-x64 --self-contained true /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:EnableCompressionInSingleFile=true /p:VERSION="${{ env.VERSION }}.${{ github.run_number }}" /p:FILELIST_URL=${{env.FILELIST_URL}} /p:SERVER_NAME="${{env.SERVER_NAME}}" /p:FILE_NAME="${{env.FILE_NAME}}"

    - name: Generate File List
      if: ${{ inputs.build_exe }}
      run: |
        cd "rof"
        # Generate filelist.yml using PowerShell
        $files = Get-ChildItem -Recurse -File
        $version = Get-Date -Format "yyyyMMddHHmmss"
        $content = "version: $version`ndownloadprefix: $env:STORAGE_URL`ndownloads:`n"
        
        foreach ($file in $files) {
            $relativePath = $file.FullName.Replace($PWD.Path + "\", "").Replace("\", "/")
            $hash = (Get-FileHash -Path $file.FullName -Algorithm MD5).Hash
            $size = (Get-Item $file.FullName).Length
            $content += "  - name: $relativePath`n    md5: $hash`n    size: $size`n"
        }
        
        Set-Content -Path "filelist_rof.yml" -Value $content -Encoding UTF8
        
        # Generate hash file for the patcher
        $patcherPath = "../THJPatcher/THJPatcher/bin/Release/net8.0-windows/win-x64/publish/THJPatcher.exe"
        $patcherHash = (Get-FileHash -Path $patcherPath -Algorithm MD5).Hash
        Set-Content -Path "$env:FILE_NAME-hash.txt" -Value $patcherHash -Encoding UTF8
        
        # Rename the patcher executable
        Move-Item -Path $patcherPath -Destination "../THJPatcher/THJPatcher/bin/Release/net8.0-windows/win-x64/publish/$env:FILE_NAME.exe" -Force

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: ${{ inputs.build_exe }}
      with:
        tag_name: ${{ env.VERSION }}.${{ github.run_number }}
        name: Release ${{ env.VERSION }}.${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          THJPatcher/THJPatcher/bin/Release/net8.0-windows/win-x64/publish/${{env.FILE_NAME}}.exe
          rof/filelist_rof.yml
          rof/${{env.FILE_NAME}}-hash.txt
          manifest.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
